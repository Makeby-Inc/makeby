model FleaMarketProduct {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  sellerUserId String  @map("seller_user_id")
  buyerUserId  String? @map("buyer_user_id")
  categoryId   Int     @map("category_id")

  title       String
  tradeType   TradeType               @map("trade_type")
  price       Int?
  description String
  viewCount   Int                     @default(0) @map("view_count")
  status      FleaMarketProductStatus @default(FOR_SALE)

  review        FleaMarketProductReview?
  productImages FleaMarketProductImage[]
  tags          FleaMarketProductTag[]
  complaints    FleaMarketProductComplaint[]
  chatRooms     FleaMarketChatRoom[]

  seller          User                    @relation("seller", fields: [sellerUserId], references: [id], onDelete: Cascade)
  buyer           User?                   @relation("buyer", fields: [buyerUserId], references: [id], onDelete: Cascade)
  productCategory ProductCategory         @relation(fields: [categoryId], references: [id])
  likes           FleaMarketProductLike[]

  @@map("flea_market_product")
}

model FleaMarketProductImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  fleaMarketProductId String @map("flea_market_product_id")

  imageUrl  String  @map("image_url")
  isPrimary Boolean @default(false) @map("is_primary")

  fleaMarketProduct FleaMarketProduct @relation(fields: [fleaMarketProductId], references: [id], onDelete: Cascade)

  @@map("flea_market_product_image")
}

model FleaMarketProductTag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  fleaMarketProductId String @map("flea_market_product_id")

  name String

  fleaMarketProduct FleaMarketProduct @relation(fields: [fleaMarketProductId], references: [id], onDelete: Cascade)

  @@map("flea_market_product_tag")
}

model FleaMarketProductComplaint {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  fleaMarketProductId String @map("flea_market_product_id")
  complainedUserId    String @map("complained_user_id")

  complaintType String @map("complaint_type")
  content       String

  fleaMarketProduct FleaMarketProduct @relation(fields: [fleaMarketProductId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [complainedUserId], references: [id], onDelete: Cascade)

  @@map("flea_market_product_complaint")
}

model FleaMarketChatRoom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  fleaMarketProductId String @map("flea_market_product_id")
  senderUserId        String @map("sender_user_id")
  receiverUserId      String @map("receiver_user_id")

  deletedBySender   Boolean @default(false)
  deletedByReceiver Boolean @default(false)

  messages Message[]

  fleaMarketProduct FleaMarketProduct @relation(fields: [fleaMarketProductId], references: [id], onDelete: Cascade)
  senderUser        User              @relation("sender", fields: [senderUserId], references: [id], onDelete: Cascade)
  receiverUser      User              @relation("receiver", fields: [receiverUserId], references: [id], onDelete: Cascade)

  @@unique([senderUserId, receiverUserId, fleaMarketProductId])
  @@index([senderUserId])
  @@index([receiverUserId])
  @@map("flea_market_chat_room")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  chatRoomId     String @map("chat_room_id")
  senderUserId   String @map("sender_user_id")
  receiverUserId String @map("receiver_user_id")

  text           String?
  images         String[]
  isSenderRead   Boolean  @default(false) @map("is_sender_read")
  isReceiverRead Boolean  @default(false) @map("is_receiver_read")

  chatRoom     FleaMarketChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  senderUser   User               @relation("sender", fields: [senderUserId], references: [id], onDelete: Cascade)
  receiverUser User               @relation("receiver", fields: [receiverUserId], references: [id], onDelete: Cascade)

  @@map("message")
}
